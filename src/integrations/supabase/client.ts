// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Environment variables - MUST be set correctly
const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL || "https://mxtsdgkwzjzlttpotole.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY;

// Validate required environment variables
if (!SUPABASE_PUBLISHABLE_KEY) {
  console.error('VITE_SUPABASE_ANON_KEY environment variable is required');
  throw new Error('Missing Supabase anon key - check environment configuration');
}

// Debug logging for production
console.log('Supabase client initialization:', {
  url: SUPABASE_URL,
  hasKey: !!SUPABASE_PUBLISHABLE_KEY,
  keyLength: SUPABASE_PUBLISHABLE_KEY?.length || 0
});

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Determine correct redirect URL based on environment
export const getRedirectUrl = () => {
  if (typeof window === 'undefined') return 'https://dashboard.lanonasis.com/auth/callback';

  const isLocalDevelopment = window.location.hostname === '127.0.0.1' ||
    window.location.hostname === 'localhost' ||
    window.location.hostname.match(/^192\.168\./);

  if (isLocalDevelopment) {
    return `${window.location.origin}/auth/callback`;
  }

  // Always redirect to dashboard.lanonasis.com auth callback for OAuth
  return 'https://dashboard.lanonasis.com/auth/callback';
};

// OAuth callback URL for provider configurations
export const getOAuthCallbackUrl = () => {
  if (typeof window === 'undefined') return 'https://dashboard.lanonasis.com/auth/callback';

  const isLocalDevelopment = window.location.hostname === '127.0.0.1' ||
    window.location.hostname === 'localhost' ||
    window.location.hostname.match(/^192\.168\./);

  if (isLocalDevelopment) {
    return `${window.location.origin}/auth/callback`;
  }

  // Always use dashboard.lanonasis.com for OAuth callbacks
  return 'https://dashboard.lanonasis.com/auth/callback';
};

// Create Supabase client with error handling
let supabaseInstance: ReturnType<typeof createClient<Database>> | null = null;

const createSupabaseClient = () => {
  if (supabaseInstance) {
    return supabaseInstance;
  }

  try {
    console.log('Creating Supabase client with:', { url: SUPABASE_URL, hasKey: !!SUPABASE_PUBLISHABLE_KEY });
    
    supabaseInstance = createClient<Database>(
      SUPABASE_URL,
      SUPABASE_PUBLISHABLE_KEY,
      {
        auth: {
          flowType: 'pkce',
          detectSessionInUrl: true,
          persistSession: true,
          autoRefreshToken: true,
        },
      }
    );
    
    console.log('Supabase client created successfully');
    return supabaseInstance;
  } catch (error) {
    console.error('Failed to initialize Supabase client:', error);
    // Create a dummy client that won't crash the app
    supabaseInstance = createClient<Database>(
      'https://placeholder.supabase.co',
      'placeholder-key'
    );
    return supabaseInstance;
  }
};

export const supabase = createSupabaseClient();